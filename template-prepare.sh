#!/bin/bash

### Get Release
NAME=$(grep '^NAME=' /etc/os-release | cut -d '"' -f 2)
VERSION_ID=$(grep '^VERSION_ID=' /etc/os-release | cut -d '"' -f 2)

### FUNCTIONS
apt_update_upgrade () {
    apt update
    apt -y upgrade
}

set_locale () {
    locale-gen --purge en_US.UTF-8
    echo -e 'LANG="en_US.UTF-8"\nLANGUAGE="en_US:en"\n' > /etc/default/locale
    export LANGUAGE=en_US.UTF-8
    export LANG=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
}

apt_install_debian () {
    apt install -y acpid perl wget cloud-init cloud-initramfs-growroot
}

remove_user () {
    username=$(awk -F: '$3 == 1000 { print $1 }' /etc/passwd) # znajduje uzytkownika o ID 1000
    deluser $username --remove-home
}

cloud_init_config_cloudstack () {
cat > /etc/cloud/cloud.cfg.d/99_cloudstack.cfg << EOF
datasource_list: [ ConfigDrive, CloudStack, None ]
datasource:
  CloudStack: {}
  None: {}
EOF
}

cloud_init_config_users () {
    # Enable set-passwords module on every boot. By default the set-passwords module runs only on first boot of the instance, change that to run on every boot.
    sed -i s/" - set-passwords"/" - [set-passwords, always]"/g /etc/cloud/cloud.cfg
    # Specify the managed user. Cloudstack will create the user, set a password and reset it when requested.
cat > /etc/cloud/cloud.cfg.d/80_user.cfg << EOF
system_info:
  default_user:
    name: root
    lock_passwd: true              # disable user password login - true/false
disable_root: 0                     # root remote login is 0 - enabled, 1 - disabled
ssh_pwauth: 0                           # password login is 0 - disabled, 1- enabled
EOF
}

cloud_init_config_ssh () {
    # SSH keys management. Cloud-init ssh module can automatically install new SSH keys when set or reset from Cloudstack GUI. By default the module runs once during instance creation and will fetch Cloudstack keys without any additional configuration. To enable Cloudstack reset SSH keys feature configure cloud-init ssh module to run on every boot.
    sed -i s/" - ssh$"/" - [ssh, always]"/g /etc/cloud/cloud.cfg
    # Disable cloud-init regenerating host certificates on boot. If template certificates are deleted they will be regenerated by the OS on instnace first boot.
    echo "ssh_deletekeys: false" > /etc/cloud/cloud.cfg.d/49_hostkeys.cfg
}

cloud_init_config_storage () {

cat > /etc/cloud/cloud.cfg.d/50_growpartion.cfg << EOF
growpart:
  mode: auto
  devices:
    - "/dev/sda2"
    - "/dev/sda5"
  ignore_growroot_disabled: false
EOF

cat > /etc/cloud/cloud.cfg.d/51_extend_volume.cfg << EOF
runcmd:
  - [ cloud-init-per, always, grow_VG, pvresize, /dev/sda5 ]
  - [ cloud-init-per, always, grow_LV, lvresize, -l, '+100%FREE', /dev/localhost-vg/root ]
  - [ cloud-init-per, always, grow_FS, resize2fs, /dev/localhost-vg/root ]
EOF

sed -i s/" - runcmd"/" - [runcmd, always]"/g /etc/cloud/cloud.cfg
sed -i s/" - scripts-user"/" - [scripts-user, always]"/g /etc/cloud/cloud.cfg

}

cloud_init_config_storage_ubuntu () {

cat > /etc/cloud/cloud.cfg.d/50_growpartion.cfg << EOF
growpart:
  mode: auto
  devices:
    - "/dev/sda3"
  ignore_growroot_disabled: false
EOF

cat > /etc/cloud/cloud.cfg.d/51_extend_volume.cfg << EOF
runcmd:
  - [ cloud-init-per, always, grow_VG, pvresize, /dev/sda3 ]
  - [ cloud-init-per, always, grow_LV, lvresize, -l, '+100%FREE', /dev/ubuntu-vg/ubuntu-lv ]
  - [ cloud-init-per, always, grow_FS, resize2fs, /dev/ubuntu-vg/ubuntu-lv ]
EOF

sed -i s/" - runcmd"/" - [runcmd, always]"/g /etc/cloud/cloud.cfg
sed -i s/" - scripts-user"/" - [scripts-user, always]"/g /etc/cloud/cloud.cfg

}


cloud_init_config_storage_kali () {

cat > /etc/cloud/cloud.cfg.d/50_growpartion.cfg << EOF
growpart:
  mode: auto
  devices:
    - "/dev/sda5"
  ignore_growroot_disabled: false
EOF

cat > /etc/cloud/cloud.cfg.d/51_extend_volume.cfg << EOF
runcmd:
  - [ cloud-init-per, always, grow_VG, pvresize, /dev/sda5 ]
  - [ cloud-init-per, always, grow_LV, lvresize, -l, '+100%FREE', /dev/ubuntu-vg/ubuntu-lv ]
  - [ cloud-init-per, always, grow_FS, resize2fs, /dev/ubuntu-vg/ubuntu-lv ]
EOF

sed -i s/" - runcmd"/" - [runcmd, always]"/g /etc/cloud/cloud.cfg
sed -i s/" - scripts-user"/" - [scripts-user, always]"/g /etc/cloud/cloud.cfg

}


cloud_init_cleanup () {
    rm -rf /var/lib/cloud/*
    cloud-init clean
}

cloud_init_fix_services () {
    systemctl disable cloud-init.service cloud-init-local.service cloud-final.service cloud-config.service cloud-init-hotplugd.socket
    sed -i s/"WantedBy=cloud-init.target"/"WantedBy=multi-user.target"/g /lib/systemd/system/cloud-init-hotplugd.socket
    sed -i s/"WantedBy=cloud-init.target"/"WantedBy=multi-user.target"/g /lib/systemd/system/cloud-config.service
    sed -i s/"WantedBy=cloud-init.target"/"WantedBy=multi-user.target"/g /lib/systemd/system/cloud-final.service
    sed -i s/"WantedBy=cloud-init.target"/"WantedBy=multi-user.target"/g /lib/systemd/system/cloud-init-local.service
    sed -i s/"WantedBy=cloud-init.target"/"WantedBy=multi-user.target"/g /lib/systemd/system/cloud-init.service
    systemctl enable cloud-init.service cloud-init-local.service cloud-final.service cloud-config.service cloud-init-hotplugd.socket
}

clear_files () {
    rm -f /etc/udev/rules.d/*
    rm -f /var/lib/dhcp/*
    rm -rf /etc/sudoers.d/*
}

clear_logs () {
    rm -rf /var/log/*
    logrotate -f /etc/logrotate.conf 2>/dev/null
}

clear_ssh () {
    rm -f /etc/ssh/*key*
}

clear_history () {
    rm -f /root/.bash_history
    history -c
    unset HISTFILE
}



halt_system () {
    halt -p
}


update_ssh_config () {

    # sciezka do pliku konfiguracyjnego
    SSHD_CONFIG="/etc/ssh/sshd_config"

    # logowanie root wlaczenie
    sed -i '/^PermitRootLogin/s/.*/PermitRootLogin yes/' $SSHD_CONFIG

    # czasami nie ma linii to ja dodaj i wylacz logowanie root
    if ! grep -q "^PermitRootLogin" $SSHD_CONFIG; then
        echo "PermitRootLogin yes" >> $SSHD_CONFIG
    fi
    
    # logowanie haslem off
    sed -i '/^PasswordAuthentication/s/.*/PasswordAuthentication no/' $SSHD_CONFIG
    sed -i '/^ChallengeResponseAuthentication/s/.*/ChallengeResponseAuthentication no/' $SSHD_CONFIG

    # tez jak nie ma w konfigu to stworz i wylacz logowanie haslem
    if ! grep -q "^PasswordAuthentication" $SSHD_CONFIG; then
        echo "PasswordAuthentication no" >> $SSHD_CONFIG
    fi

    if ! grep -q "^ChallengeResponseAuthentication" $SSHD_CONFIG; then
        echo "ChallengeResponseAuthentication no" >> $SSHD_CONFIG
    fi

    # restart serwisu ssh
    sudo systemctl restart ssh
}

### PREPARE OS FOR TEMPLATE

# Debian 12
if [ "$NAME" = "Debian GNU/Linux" ] && [ "$VERSION_ID" = "12" ]; then
    apt_update_upgrade
    set_locale
    apt_install_debian
    remove_user
    cloud_init_config_cloudstack
    cloud_init_config_users
    cloud_init_config_ssh
    cloud_init_config_storage
    cloud_init_cleanup
    cloud_init_fix_services
    clear_files
    update_ssh_config
    clear_ssh
    clear_logs
    clear_history
    halt_system
fi

# Ubuntu
if [ "$NAME" = "Ubuntu" ] && [ "$VERSION_ID" = "22.04" ]; then
    apt_update_upgrade
    set_locale
    apt_install_debian
    remove_user
    cloud_init_config_cloudstack
    cloud_init_config_users
    cloud_init_config_ssh
    cloud_init_config_storage_ubuntu
    cloud_init_cleanup
    cloud_init_fix_services
    clear_files
    update_ssh_config
    clear_ssh
    clear_logs
    clear_history
    halt_system
fi

# Kali Linux
if [ "$NAME" = "Kali GNU/Linux" ] && [ "$VERSION_ID" = "2023.3" ]; then
    apt_update_upgrade
    set_locale
    apt_install_debian
    remove_user
    cloud_init_config_cloudstack
    cloud_init_config_users
    cloud_init_config_ssh
    cloud_init_config_storage_kali
    cloud_init_cleanup
    cloud_init_fix_services
    clear_files
    update_ssh_config
    clear_ssh
    clear_logs
    clear_history
    halt_system
fi
